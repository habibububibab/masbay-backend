router terpisah :


router.get('/listHarga', (req, res) => {
    Harga.find().sort({'operator':1, 'denom':1})
    .then((ListHarga) => {
        res.json(ListHarga);
    })
    .catch(() => {
        res.send("Maaf! Terdapat error.");
    });
});

router.get('/listOperator', (req, res) => {
    Harga.find().distinct('operator')
    .then((ListOperator) => {
        res.send(ListOperator);
    })
    .catch((err) => {
        res.send(err);
    })
});

router.get('/listOperator/:prioritas', (req, res) => {
    Harga.find().distinct('operator')
    .then((ListOperator) => {
        let i = 0;
        while (true) {
            if (ListOperator[i] == req.params.prioritas) {
                //swap list operator prioritas
                let dummy = ListOperator[0];
                ListOperator[0] = req.params.prioritas;
                ListOperator[i] = dummy;
                break;
            } else {
                i++;
            }
            if (i == (ListOperator.length - 1)) {
                break; //antisipasi error typo URL akses ke API
            }
        }
        res.send(ListOperator);
    })
    .catch((err) => {
        res.send(err);
    })
});

router.get('/listHarga/:operator', (req, res) => {
    Harga.find({operator: req.params.operator}).sort({'denom':1})
    .then((ListHargaOperator) => {
        res.json(ListHargaOperator);
    })
    .catch(() => {
        res.send("Maaf! Terdapat error.");
    })
});

router.get('/listHarga/nomor/:nomor', (req, res) => {
    Kodeawal.find({nomor: req.params.nomor}).distinct('operator')
    .then((KodeNomor) => {
        console.log(KodeNomor);
        Harga.find({operator: KodeNomor[0]}).sort({'denom':1})
        .then((ListHargaOperator) => {
            res.json(ListHargaOperator);
        })
        .catch(() => {
            res.send("Maaf! Terdapat error GET Harga.");
        });
    })
    .catch(() => {
        res.send("Maaf! Terdapat error GET Kode Awal.");
    });
});

router.post('/inputTransaksi', (req, res) => {
    //ambil data transaksi price yang sedang dalam proses (Pending) dari database
    //console.log(req.body);

    //cari kode operator berdasarkan input nomor handphone
    //var phone = req.body.phone;
    var phone = req.body.phone.substring(0, 4);
    //console.log(typeof phone);
    Kodeawal.find({nomor: phone}).distinct('operator')
    .then((operator) => {
        //cari price yang sedang pending
        Transaksi.find({status:'Pending'}).distinct('price')
        .then((HargaPending) => {
            //cari price berdasarkan req.body.denom dan operator
            Harga.find({denom: req.body.denom, operator: operator[0]})
            .then((price) => {
                //generate harga yang unik untuk setiap transaksi yang pending
                //pastikan tidak ada data price yang kembar di dalam database
                //ulangi generate harga sampai didapatkan harga yang unik dengan data harga di database
                let i = 0;
                do {
                    let rand = Math.floor((Math.random() * 50) + 1); //generate random number antara 1-50
                    var uniqprice = price[0].price + rand; //tambahkan price dengan random number
                    let cekuniq = HargaPending.indexOf(uniqprice); // cek harga unik pada array object
                    i++;
                    if (cekuniq != -1) { //ada harga yang kembar
                        continue;
                    } else if ((cekuniq == -1) || (i==50)) { //harga unik atau harga sudah tidak mungkin unik
                        break;
                    }
                } while (true);
                if (i!= 50) {
                    var date3hour = new Date();
                    date3hour.setTime(date3hour.getTime() + (1000 * 10740)); //selisih 3 jam - 1 menit
                    
                    //simpan data harga ke dalam request yang akan disimpan ke dalam database
                    const transaksi = new Transaksi(req.body);
                    transaksi.operator = operator[0];
                    transaksi.price = uniqprice;
                    transaksi.date = date3hour;
                    transaksi.save()
                    .then((TransaksiSukses) => {
                        res.send(TransaksiSukses);
                    }) 
                    .catch(() => {
                        res.send('Maaf! Terdapat error POST data transaksi ke database');
                    }); 
                } else {
                    res.send('Maaf! Server sedang sibuk menangani pembelian. Silahkan coba beberapa saat lagi.');
                }
            })
            .catch((err) => {
                console.log(err);
                res.send(err);
            });  
        })
        .catch(() => {
            res.send('Maaf! Terdapat error GET harga pending');
        });
    })
    .catch(() => {
        res.send('Maaf! Terdapat error GET kode Operator');
    });  
});

router.post('/isiPulsa', (req, res) => {
    //Kirim ke API

    const axios = require("axios");
    var qs = require("qs");

    //json pengganti raw code disini

    //axios raw code
    axios({
        method: 'POST',
        url: process.env.APIPULSATOP,
        params: {
            key: process.env.KEY,
        },
        data: qs.stringify({ 
            operator: req.body.operator,
            phone: req.body.phone,
            secret: process.env.SECRET,
            denom: req.body.denom 
        })
    })
    .then(function(response){
        console.log(response.data);
        console.log(response.status);
    })
    .catch(function(error){
        console.log(error);
    });         
});

